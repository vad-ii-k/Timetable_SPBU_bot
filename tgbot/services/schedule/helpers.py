""" Auxiliary functions for getting a schedule """
from datetime import date, timedelta

from aiogram.utils.i18n import get_i18n
from babel.dates import format_date


async def get_schedule_weekday_header(day: date, general_location: str = None) -> str:
    """

    :param day:
    :param general_location:
    :return:
    """
    try:
        locale = get_i18n().current_locale
    except LookupError:
        locale = 'ru'
    formatted_date = format_date(day, "EEEE, d MMMM", locale=locale)
    weekday_sticker = _get_weekday_sticker(formatted_date)
    header = f"{weekday_sticker} <b>{formatted_date}</b>\n"
    if general_location:
        header += f"üìç {general_location}\n"
    return header


def get_monday_and_sunday_dates(day_counter: int = None, week_counter: int = None) -> tuple[date, date]:
    """

    :param day_counter:
    :param week_counter:
    :return:
    """
    current_date = date.today() + timedelta(week_counter * 7 if week_counter is not None else day_counter)
    monday = current_date - timedelta(days=current_date.weekday())
    sunday = monday + timedelta(days=6)
    return monday, sunday


def get_time_sticker(hour: int) -> str:
    """

    :param hour:
    :return:
    """
    time_sticker = ""
    match hour:
        case 0 | 12:
            time_sticker = "üïõ"
        case 1 | 13:
            time_sticker = "üïê"
        case 2 | 14:
            time_sticker = "üïë"
        case 3 | 15:
            time_sticker = "üïí"
        case 4 | 16:
            time_sticker = "üïì"
        case 5 | 17:
            time_sticker = "üïî"
        case 6 | 18:
            time_sticker = "üïï"
        case 7 | 19:
            time_sticker = "üïñ"
        case 8 | 20:
            time_sticker = "üïó"
        case 9 | 21:
            time_sticker = "üïò"
        case 10 | 22:
            time_sticker = "üïô"
        case 11 | 23:
            time_sticker = "üïö"
    return time_sticker


def get_subject_format_sticker(subject_format: str) -> str:
    """

    :param subject_format:
    :return:
    """
    format_sticker = "‚úçüèº"
    match subject_format.split(" ")[0]:
        case "–ª–µ–∫—Ü–∏—è":
            format_sticker = "üó£"
        case "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ":
            format_sticker = "üßëüèª‚Äçüíª"
        case "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è":
            format_sticker = "üî¨"
        case "—Å–µ–º–∏–Ω–∞—Ä":
            format_sticker = "üí¨"
        case "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
            format_sticker = "ü§ùüèº"
        case "—ç–∫–∑–∞–º–µ–Ω":
            format_sticker = "‚ùó"
        case "–∑–∞—á—ë—Ç":
            format_sticker = "‚ö†Ô∏è"
    return format_sticker


def _get_weekday_sticker(day: str) -> str:
    """

    :param day:
    :return:
    """
    weekday_sticker = ""
    match day.split(",")[0]:
        case "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" | "Monday":
            weekday_sticker = "1Ô∏è‚É£"
        case "–≤—Ç–æ—Ä–Ω–∏–∫" | "Tuesday":
            weekday_sticker = "2Ô∏è‚É£"
        case "—Å—Ä–µ–¥–∞" | "Wednesday":
            weekday_sticker = "3Ô∏è‚É£"
        case "—á–µ—Ç–≤–µ—Ä–≥" | "Thursday":
            weekday_sticker = "4Ô∏è‚É£"
        case "–ø—è—Ç–Ω–∏—Ü–∞" | "Friday":
            weekday_sticker = "5Ô∏è‚É£"
        case "—Å—É–±–±–æ—Ç–∞" | "Saturday":
            weekday_sticker = "6Ô∏è‚É£"
        case "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ" | "Sunday":
            weekday_sticker = "7Ô∏è‚É£"
    return weekday_sticker
