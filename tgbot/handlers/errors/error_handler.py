import logging

from aiogram.types import Update
from aiogram.utils.exceptions import TelegramAPIError, MessageNotModified, CantParseEntities, \
    MessageToDeleteNotFound

from tgbot.loader import dp


@dp.errors_handler()
async def errors_handler(update: Update, exception: Exception):
    """
    Error's handler.

    :param update: Update
    :param exception: Exception
    :return:
    """
    if isinstance(exception, MessageNotModified):
        logging.exception("Message is not modified")
        return True

    if isinstance(exception, CantParseEntities):
        logging.exception(f"CantParseEntities: {exception} \nUpdate: {update}")
        await update.callback_query.message.answer(
            text="üÜò –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ,\n"
                 "   –∏–∑-–∑–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Å–∞–π—Ç–∞ timetable.spbu.ru\n"
                 "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç–µ –≤–∏–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ /setting"
        )
        return True

    if isinstance(exception, TelegramAPIError):
        logging.exception(f"TelegramAPIError: {exception} \nUpdate: {update}")
        return True

    if isinstance(exception, MessageToDeleteNotFound):
        logging.exception(f"MessageToDeleteNotFound: {exception} \nUpdate: {update}")
        return True

    logging.exception(f"Update: {update} \n{exception}")
